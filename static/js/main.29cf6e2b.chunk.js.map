{"version":3,"sources":["Components/logoTec.jpg","Components/Header.js","Components/Body.js","Components/Footer.js","Components/Banner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logoTec","Component","Body","props","texto1","temas","map","e","index","key","Button","onClick","alert","Footer","pie","Banner","texto","this","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,qC,mRCe5BC,G,6KARP,OACI,yBAAKC,UAAU,UACX,yBAAKC,IAAKC,W,GAJLC,c,gBCuBNC,MAxBf,SAAcC,GAQV,OACI,yBAAKL,UAAU,QAEX,4BAAKK,EAAMC,QAEPD,EAAME,MAAMC,KAAI,SAACC,EAAEC,GAAH,OAChB,uBAAGC,IAAKD,GAAQD,MAIxB,kBAACG,EAAA,EAAD,CAAQC,QAAS,kBAdVC,MAAM,mDAcb,gB,MCXOC,MARf,YAAuB,IAANC,EAAK,EAALA,IACb,OACI,yBAAKhB,UAAU,UACVgB,ICSEC,G,6KAVF,IACEC,EAAOC,KAAKd,MAAZa,MACP,OACI,yBAAKlB,UAAU,UACVkB,O,GALIf,cCgCNiB,MA7Bf,WAOE,OACE,yBAAKpB,UAAU,OACb,kBAAC,EAAD,CACEkB,MAAM,uCAEN,kBAAC,EAAD,MACA,kBAAC,EAAD,CACAA,MAAM,eAEN,kBAAC,EAAD,CACAZ,OAAO,wBACPC,MAjBM,CAAC,0BACb,kBACA,+BACA,eACA,cAgBM,kBAAC,EAAD,CACAS,IAAK,+ECjBOK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.29cf6e2b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logoTec.96aff77c.jpg\";","import React,{Component} from 'react';\r\nimport logoTec from './logoTec.jpg';\r\nimport './Header.css';\r\n\r\n\r\nclass Header extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"Header\">\r\n                <img src={logoTec}></img>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Body.css';\r\nimport { Alert, Button } from 'react-bootstrap';\r\n\r\nfunction Body(props){\r\n\r\n        \r\n    const mensaje=()=>{\r\n        return alert(\"Hola mundo.\\n Pd. no pude centrar el header:(\")\r\n      }\r\n\r\n\r\n    return(\r\n        <div className=\"Body\">\r\n            \r\n            <h2>{props.texto1}</h2>\r\n            {\r\n                props.temas.map((e,index)=>\r\n                <p key={index}>{e}</p>\r\n                )\r\n            }\r\n\r\n        <Button onClick={()=>mensaje()}>Click aqui</Button>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Body;","import React from 'react';\r\nimport './Footer.css';\r\n\r\nfunction Footer({pie}){\r\n    return(\r\n        <div className=\"Footer\">\r\n            {pie}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React,{Component} from 'react';\r\nimport './Banner.css';\r\n\r\n\r\nclass Banner extends Component{\r\n    render(){\r\n        const {texto}=this.props;\r\n        return(\r\n            <div className=\"Banner\">\r\n                {texto}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Banner;","import React from 'react';\r\nimport './App.css';\r\nimport Header from './Components/Header';\r\nimport Body from './Components/Body';\r\nimport Footer from './Components/Footer';\r\nimport Banner from './Components/Banner';\r\n\r\nfunction App(){\r\n  const temas=[\"1. Tipos de componentes\", \r\n  \"2. Contenedores\", \r\n  \"3. Usar mas de un componente\", \r\n  \"4. Funciones\", \r\n  \"5. Props\"]\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Banner\r\n        texto=\"Desarrollo de aplicaciones moviles\"\r\n        />\r\n        <Header/>\r\n        <Banner\r\n        texto=\"26/10/2020\"\r\n        />\r\n        <Body \r\n        texto1=\"Practica 1 - Unidad 2\"\r\n        temas={temas}\r\n        />\r\n        \r\n        <Footer\r\n        pie={<p>Copyright &copy; Todos los derechos reservados</p> }\r\n        />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}